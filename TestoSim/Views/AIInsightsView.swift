import SwiftUI

/// View for displaying AI-generated insights
struct AIInsightsView: View {
    @EnvironmentObject var dataStore: AppDataStore
    @StateObject private var insightsGenerator = AIInsightsGenerator()
    
    var protocolID: UUID?
    var cycleID: UUID?
    
    @State private var isLoading = false
    @State private var expandedPoints: Set<String> = []
    
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 16) {
                if isLoading {
                    loadingView
                } else if let insights = insightsGenerator.latestInsights {
                    insightsContent(insights)
                } else {
                    noInsightsView
                }
            }
            .padding()
        }
        .navigationTitle("AI Insights")
        .toolbar {
            ToolbarItem(placement: .primaryAction) {
                Button {
                    generateInsights(forceRefresh: true)
                } label: {
                    Label("Refresh", systemImage: "arrow.clockwise")
                }
                .disabled(isLoading)
            }
        }
        .onAppear {
            generateInsights()
        }
    }
    
    // MARK: - Private Views
    
    private var loadingView: some View {
        VStack(spacing: 20) {
            ProgressView()
                .scaleEffect(1.5)
            
            Text("Analyzing data and generating insights...")
                .font(.headline)
            
            Text("This may take a moment")
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity, minHeight: 300)
    }
    
    private var noInsightsView: some View {
        VStack(spacing: 20) {
            Image(systemName: "lightbulb")
                .font(.system(size: 40))
                .foregroundColor(.orange)
            
            Text("No insights available")
                .font(.headline)
            
            Text("Tap the refresh button to generate insights based on your current protocol or cycle data.")
                .multilineTextAlignment(.center)
                .foregroundColor(.secondary)
            
            Button("Generate Insights") {
                generateInsights(forceRefresh: true)
            }
            .buttonStyle(.borderedProminent)
            .padding(.top)
        }
        .frame(maxWidth: .infinity, minHeight: 300)
        .padding()
    }
    
    private func insightsContent(_ insights: Insights) -> some View {
        VStack(alignment: .leading, spacing: 16) {
            // Title
            Text(insights.title)
                .font(.title)
                .fontWeight(.bold)
            
            // Summary
            Text(insights.summary)
                .font(.headline)
                .padding(.bottom, 8)
            
            // Disclaimer
            Text("Note: These insights are generated by AI and should not replace medical advice.")
                .font(.caption)
                .foregroundColor(.secondary)
                .padding(.bottom, 8)
            
            // Blend explanation if available
            if let blendExplanation = insights.blendExplanation {
                blendExplanationView(blendExplanation)
            }
            
            // Key points
            if !insights.keyPoints.isEmpty {
                Text("Key Points")
                    .font(.title2)
                    .fontWeight(.bold)
                    .padding(.top, 8)
                
                ForEach(insights.keyPoints, id: \.title) { point in
                    keyPointView(point)
                }
            }
        }
    }
    
    private func blendExplanationView(_ explanation: String) -> some View {
        VStack(alignment: .leading, spacing: 10) {
            Text("Blend Analysis")
                .font(.title2)
                .fontWeight(.bold)
            
            Text(explanation)
                .font(.body)
                .lineSpacing(4)
        }
        .padding()
        .background(Color.blue.opacity(0.1))
        .cornerRadius(10)
    }
    
    private func keyPointView(_ point: KeyPoint) -> some View {
        let pointId = point.title
        let isExpanded = expandedPoints.contains(pointId)
        
        return VStack(alignment: .leading, spacing: 8) {
            // Header row with icon, title, and expand/collapse button
            HStack {
                iconForKeyPoint(point.type)
                    .font(.headline)
                    .foregroundColor(colorForKeyPoint(point.type))
                    .frame(width: 24, height: 24)
                
                Text(point.title)
                    .font(.headline)
                    .foregroundColor(colorForKeyPoint(point.type))
                
                Spacer()
                
                Button {
                    withAnimation {
                        if isExpanded {
                            expandedPoints.remove(pointId)
                        } else {
                            expandedPoints.insert(pointId)
                        }
                    }
                } label: {
                    Image(systemName: isExpanded ? "chevron.up" : "chevron.down")
                        .foregroundColor(.secondary)
                }
            }
            
            // Description (visible when expanded)
            if isExpanded {
                Text(point.description)
                    .font(.body)
                    .foregroundColor(.primary)
                    .padding(.leading, 32)
                    .padding(.top, 4)
            }
        }
        .padding()
        .background(backgroundForKeyPoint(point.type).opacity(0.1))
        .cornerRadius(10)
        .contentShape(Rectangle()) // Make the entire row tappable
        .onTapGesture {
            withAnimation {
                if isExpanded {
                    expandedPoints.remove(pointId)
                } else {
                    expandedPoints.insert(pointId)
                }
            }
        }
    }
    
    // MARK: - Helper Methods
    
    private func generateInsights(forceRefresh: Bool = false) {
        isLoading = true
        
        if let protocolID = protocolID, let treatmentProtocol = dataStore.profile.protocols.first(where: { $0.id == protocolID }) {
            // Generate insights for a specific protocol
            insightsGenerator.generateInsights(
                for: treatmentProtocol,
                profile: dataStore.profile,
                simulationData: dataStore.simulationData,
                compoundLibrary: dataStore.compoundLibrary,
                forceRefresh: forceRefresh
            )
        } else if let cycleID = cycleID, let cycle = dataStore.cycles.first(where: { $0.id == cycleID }) {
            // Generate insights for a specific cycle
            insightsGenerator.generateCycleInsights(
                for: cycle,
                profile: dataStore.profile,
                simulationData: dataStore.cycleSimulationData,
                compoundLibrary: dataStore.compoundLibrary,
                forceRefresh: forceRefresh
            )
        } else if let selectedProtocolID = dataStore.selectedProtocolID,
                  let selectedProtocol = dataStore.profile.protocols.first(where: { $0.id == selectedProtocolID }) {
            // Use the selected protocol as fallback
            insightsGenerator.generateInsights(
                for: selectedProtocol,
                profile: dataStore.profile,
                simulationData: dataStore.simulationData,
                compoundLibrary: dataStore.compoundLibrary,
                forceRefresh: forceRefresh
            )
        } else if let selectedCycleID = dataStore.selectedCycleID,
                  let selectedCycle = dataStore.cycles.first(where: { $0.id == selectedCycleID }) {
            // Use the selected cycle as fallback
            insightsGenerator.generateCycleInsights(
                for: selectedCycle,
                profile: dataStore.profile,
                simulationData: dataStore.cycleSimulationData,
                compoundLibrary: dataStore.compoundLibrary,
                forceRefresh: forceRefresh
            )
        }
        
        // Handle loading state through observation
        isLoading = insightsGenerator.isLoading
    }
    
    private func iconForKeyPoint(_ type: KeyPoint.KeyPointType) -> some View {
        switch type {
        case .information:
            return Image(systemName: "info.circle.fill")
        case .positive:
            return Image(systemName: "checkmark.circle.fill")
        case .warning:
            return Image(systemName: "exclamationmark.triangle.fill")
        case .suggestion:
            return Image(systemName: "lightbulb.fill")
        }
    }
    
    private func colorForKeyPoint(_ type: KeyPoint.KeyPointType) -> Color {
        switch type {
        case .information:
            return .blue
        case .positive:
            return .green
        case .warning:
            return .orange
        case .suggestion:
            return .purple
        }
    }
    
    private func backgroundForKeyPoint(_ type: KeyPoint.KeyPointType) -> Color {
        switch type {
        case .information:
            return .blue
        case .positive:
            return .green
        case .warning:
            return .orange
        case .suggestion:
            return .purple
        }
    }
}

#Preview {
    NavigationStack {
        AIInsightsView()
            .environmentObject(AppDataStore())
    }
} 